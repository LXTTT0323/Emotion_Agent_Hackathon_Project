# .cursorrules — Emotion Agent Repo (Full Product Pipeline)
*Last updated 2025-04-30*

---
## 0 · 目标
> **最终效果**：一键完成所有分支融合 → 生成可运行 **Web MVP** → 后端 Agent 功能全连通 → 出现情绪共情 Bot Demo。CI 绿灯即视为成功。

---
## 1 · Branch & Merge 策略
| 类型 | 模板 | 说明 |
|------|-------|------|
| **main** | main | 始终可部署；合并前必须跑 CI |
| **integrate** | merge/all‑<date> | **集成分支**：专门把多人分支汇总解决冲突 ▶ 测试 ▶ PR 到 main |
| **feat** | feat/<area>-<date> | 单人功能 | 
| **fix** | fix/<brief> | Bug 修复 | 

**流程**：
1. 个人 feat → PR → integrate 分支（而非 main）。
2. Integrator （默认 YOU）在 `integrate` 内 Rebase + Conflict 解决 + run CI。 
3. **Squash & Merge** integrate → main。

> integrator 每合一次就打 tag `v0.x.y-internal`，方便回滚。

---
## 2 · 目录 Ownership（责任人）
| Path | Owner | Note |
|------|-------|------|
| backend/tools/emotion_prediction_tool.py | Thea | LSTM 模型加载 & 0‑1‑2 输出 |
| backend/services/agent_kernel.py | Raj | SK 主逻辑，必须读情绪 & history |
| backend/services/summarizer.py | **YOU** | 每 10 条摘要；Conversation Summary |
| backend/memory/ (cosmos) | **YOU** | CRUD & get_relevant_history |
| web-frontend/ | Garrett + YOU | React Vite MVP 页面 + API Hook |
| tests/ | 全员 | 各自写自身单元测试 |

---
## 3 · 功能验收表 (CI 覆盖)
| # | 功能 | 代码目录 | 测试条目 |
|---|------|----------|-----------|
| 1 | 前端 Preference Page | `web-frontend/src/pages/PreferencePage.tsx` | `cypress preference.spec.ts` |
| 2 | 前端 Chat Page | `web‑frontend/src/pages/ChatPage.tsx` | msg 显示+滚动 |
| 3 | 情绪模型 Tool | `backend/tools/emotion_prediction_tool.py` | `pytest test_emotion_tool.py` |
| 4 | 自动提问 Tool | `backend/tools/ask_emotion_tool.py` | ≥3 个情绪代码返回正确文本 |
| 5 | Context Summary | `backend/services/summarizer.py` | 长对话 10 条 → Summary 长度 ≤ 80 中文字 |
| 6 | History Retrieval | `backend/memory/cosmos_memory_store.py` | get_relevant_history 包含 3 summaries |

CI 跑 `pytest -q` + `npm run build` + `cypress run`，全部通过才能 merge。

---
## 4 · Web MVP 路由约定
| Page | Path | 说明 |
|------|------|------|
| Preference | `/` | MBTI / Tone / Age / Star Sign 表单
| Chat List | `/chat` | Start New Conversation 按钮 + 历史摘要卡片
| Chat Room | `/chat/:id` | MessageInput + Scrollable Messages + Streaming

React Hook `useAgent` 调 `/agent/analyze`，Headers 加 `x-user-id`。

---
## 5 · Context Summary 规则（实现要求）
1. `interactions` 每新增一条，查看窗口计数 `n`；当 `n == 10`：
   * 调 `summarizer.summarize(messages[0:10]) → summary`；清空窗口。
   * 把 `summary` append 到 `conversations.summary[]`。
2. `get_relevant_history(user_id)`：
   * 查询 `conversations` 最近 1 条 `summary`（上一场）+ 当前窗口文本列表。
   * 提供给 SK prompt；若无 summary 返回空串。
   * 未来支持 `top‑k semantic search`，留钩子。

---
## 6 · Cosmos DB & TTL
- Partition Key: `/user_id`（所有容器）。
- TTL (秒)：
  * interactions → `2592000` (30 天)
  * emotion_history → `7776000` (90 天)
- 固定容器名：`user_profiles`, `interactions`, `emotion_history`, `memory_embeddings`, `conversations`（已创建）。

---
## 7 · Coding Conventions
- **Python** → Black + Ruff；类型注解；环境变量经 `pydantic.BaseSettings`；不要写绝对路径。
- **React** → Vite + TS + Tailwind；组件=函数；不要使用任何 class‑based React。
- **Commit** → Conventional Commits。

---
## 8 · CI Workflow 文件
- `.github/workflows/backend.yml` → pytest + ruff + black
- `.github/workflows/frontend.yml` → npm ci + eslint + vite build
- `.github/workflows/e2e.yml` → Cypress (optional)

> **CI fail = block merge**

---
## 9 · 禁止 & 限制
- 禁止把 `.env`, `lstm_model.h5`, OpenAI Key 提交 Git。
- >5 MB 文件必须用 Git LFS。
- 不得直接推 `main`。

---
## 10 · Quick Start for New Dev
```bash
# clone and bootstrap
 git clone https://github.com/LXTTT0323/Emotion_Agent_Hackathon_Project
 cd Emotion_Agent_Hackathon_Project
 make bootstrap   # poetry + npm + pre‑commit install

# run dev stack
 make dev        # start backend (uvicorn) + vite --host
```


总结和更新：
